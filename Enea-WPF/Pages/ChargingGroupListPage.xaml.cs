using Enea_WPF.Modals;
using Generated.Client;
using System.Collections.ObjectModel;
using System.Windows;
using System.Windows.Controls;

namespace Enea_WPF;

public partial class ChargingGroupListPage : UserControl
{
    private readonly MyApiClient _apiClient;
    private readonly IServiceProvider _serviceProvider;

    public ChargingGroupListPage(MyApiClient apiClient, IServiceProvider sp)
    {
        _apiClient = apiClient;
        _serviceProvider = sp;
        Items = new ObservableCollection<ChargerGroupReadDto>();
        DataContext = this;
        InitializeComponent();
    }
    public ObservableCollection<ChargerGroupReadDto> Items { get; set; }

    public async void LoadUsers()
    {
        try
        {
            var users = await _apiClient.ChargerGroupGETAsync(0, 0);
            Items.Clear();
            foreach (var user in users.Items)
            {
                Items.Add(user);
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show($"Failed to load Chargers: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
        }

        dataGridUsers.Items.Refresh();
    }

    private async void CreateUserButton_Click(object sender, RoutedEventArgs e)
    {
        var modal = new ChargerGroupModal(_apiClient);
        if (modal.ShowDialog() == true)
        {
            LoadUsers();
        }

    }

    private async void EditUserButton_Click(object sender, RoutedEventArgs e)
    {
        if (dataGridUsers.SelectedItem is ChargerGroupReadDto selectedItem)
        {
            var modal = new ChargerGroupModal(_apiClient, selectedItem);
            if (modal.ShowDialog() == true)
            {
                LoadUsers();
            }
        }
        else
        {
            MessageBox.Show("Please select a user to edit.", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
        }
    }

    private async void DeleteUserButton_Click(object sender, RoutedEventArgs e)
    {
        if (dataGridUsers.SelectedItem is ChargerGroupReadDto selectedItem)
        {
            var result = MessageBox.Show($"Are you sure you want to delete the charger group '{selectedItem.Name}'?",
                "Confirm Delete",
                MessageBoxButton.YesNo,
                MessageBoxImage.Warning);

            if (result == MessageBoxResult.Yes)
            {
                try
                {
                    await _apiClient.ChargerGroupDELETEAsync(selectedItem.Id);
                    Items.Remove(selectedItem);
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Failed to delete charger group: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }
        else
        {
            MessageBox.Show("Please select a charger group to delete.", "Warning", MessageBoxButton.OK, MessageBoxImage.Warning);
        }
    }

    private void DataGridUsers_OnAutoGeneratedColumns(object? sender, EventArgs e)
    {
        // set id as first column
        var idColumn = dataGridUsers.Columns.FirstOrDefault(c => c.Header.ToString() == "Id");

        if (idColumn != null)
        {
            dataGridUsers.Columns.Remove(idColumn);
            dataGridUsers.Columns.Insert(0, idColumn);
        }
    }
}